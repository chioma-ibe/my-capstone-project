generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  password              String
  profilePhoto          String?
  name                  String
  bio                   String?
  firebaseId            String?        @unique
  calendar              Calendar?
  studyPreferences      StudyPreferences?
  matchesAsUser1        Match[]          @relation("User1Matches")
  matchesAsUser2        Match[]          @relation("User2Matches")
  receivedMatchRequests MatchRequest[]   @relation("ReceivedMatchRequests")
  sentMatchRequests     MatchRequest[]   @relation("SentMatchRequests")
  ratingsGiven          Rating[]         @relation("PartnerRatings")
  ratings               Rating[]         @relation("UserRatings")
  userCourses           UserCourse[]
}

model Course {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  userCourses UserCourse[]
}

model UserCourse {
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  proficiency Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model Match {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  matchedAt DateTime @default(now())
  user1     User     @relation("User1Matches", fields: [user1Id], references: [id])
  user2     User     @relation("User2Matches", fields: [user2Id], references: [id])
}

model Calendar {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  events String
  user   User   @relation(fields: [userId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  partnerId Int
  score     Int
  createdAt DateTime @default(now())
  partner   User     @relation("PartnerRatings", fields: [partnerId], references: [id])
  user      User     @relation("UserRatings", fields: [userId], references: [id])

  @@unique([userId, partnerId])
}

model MatchRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedMatchRequests", fields: [receiverId], references: [id])
  sender     User     @relation("SentMatchRequests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model StudyPreferences {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  preferredDays     String   // JSON array of preferred days (e.g., ["MONDAY", "WEDNESDAY"])
  preferredTimeRanges String  // JSON array of time ranges (e.g., [{"start": "09:00", "end": "12:00"}])
  preferBackToBack  Boolean  @default(false)
  maxSessionsPerWeek Int     @default(5)
  sessionDuration   Int      @default(60)  // in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}
